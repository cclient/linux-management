docker
//Upstart
  status docker

  stop docker
  start docker
//service
   service docker stop/start


docker ui
Shipyard
DockerUI
maDocker


docker commit -m mm --auther='' containid jamtur01/apache2:tag

Dockerfile
exec 格式run  RUN ["apg-get"," install","-y","nginx"]
EXPOSE 80 公开端口，可多个
docker build -t ='jamtur01/static_web:v1' git@github......
??



clear all container file and mirror files

  docker kill $(docker ps -q) ; docker rm $(docker ps -a -q) ; docker rmi $(docker images -q -a)

sudo docker run ubuntu:14.04 /bin/echo 'Hello world'

localhost / #  docker run node /bin/echo  'hello word'
hello word
localhost / # docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES



$ sudo docker run -t -i ubuntu:14.04 /bin/bash
root@af8bae53bdd3:/#
其中，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。

后台运行容器
docker run -d ubuntu:14.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"
          --name ubuntu
          --restart=always /
                    on-failure=:5(退出代码非-)
docker inspech  --format='{{.State.Running}}' daemon_dave daemon_dave2

docker ps -a（包含停止） -l(最后运行) -n x(最后x个容器)

 docker logs --tail 10 insane_babbage 最后10行日志
 docker logs --tail 0 -f insane_babbage 最后10行日志
             -t 加时间

 docker top
 docker exex -d daemon_dave touch /etc/new.config
 docker exec -t -i daemon_dave /bin/bash


 docker stop
 docker start
 docker restart

docker attach

docker export
docker export 7691a814370e > ubuntu.tar
docker import
docker import http://example.com/exampleimage.tgz example/imagerepo

$ cat ubuntu.tar | sudo docker import - test/buntu:v1.0
sudo docker images

docker rm  trusting_newton 处于终止状态的容器
docker rm  -f trusting_newton 运行中的容器


nsenter 命令

安装

nsenter 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。

$ cd /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; cd util-linux-2.24;
$ ./configure --without-ncurses
$ make nsenter && sudo cp nsenter /usr/local/bin
使用

nsenter 可以访问另一个进程的名字空间。nsenter 要正常工作需要有 root 权限。 很不幸，Ubuntu 14.4 仍然使用的是 util-linux 2.20。安装最新版本的 util-linux（2.24）版，请按照以下步骤：

$ wget https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz; tar xzvf util-linux-2.24.tar.gz
$ cd util-linux-2.24
$ ./configure --without-ncurses && make nsenter
$ sudo cp nsenter /usr/local/bin
为了连接到容器，你还需要找到容器的第一个进程的 PID，可以通过下面的命令获取。

PID=$(docker inspect --format "{{ .State.Pid }}" <container>)
通过这个 PID，就可以连接到这个容器：

$ nsenter --target $PID --mount --uts --ipc --net --pid
下面给出一个完整的例子。


# 在容器中运行"echo"命令，输出"hello word"
$docker run image_name echo "hello word"

# 交互式进入容器中
$docker run -i -t image_name /bin/bash


# 在容器中安装新的程序
$docker run image_name apt-get install -y app_name


$ sudo docker run -idt ubuntu
243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550
$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
243c32535da7        ubuntu:latest       "/bin/bash"         18 seconds ago      Up 17 seconds                           nostalgic_hypatia
$ PID=$(docker-pid 243c32535da7)
10981
$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid
root@243c32535da7:/#
更简单的，建议大家下载 .bashrc_docker，并将内容放到 .bashrc 中。

$ wget -P ~ https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_docker;
$ echo "[ -f ~/.bashrc_docker ] && . ~/.bashrc_docker" >> ~/.bashrc; source ~/.bashrc
这个文件中定义了很多方便使用 Docker 的命令，例如 docker-pid 可以获取某个容器的 PID；而 docker-enter 可以进入容器或直接在容器内执行命令。

$ echo $(docker-pid <container>)
$ docker-enter <container> ls


docker run
root@'contain' :/#hostname
cat //etc/hosts
172.17.0.4 containid
127.0.0.1 localhost

网络配置
ip a


/etc/default/docker
/etc/init/docker.conf
/etc/sysconfig/docker
/usr/lib/systemd/docker.service

systemctl --system daemon-reload

python -mjson.tool

curl http:docker.example.com:2375/info
        /images/contianmid
        /images/json|python -mjson.tool
        /images/search?trem=jamtur01
        /containers/json
        ?all=1
